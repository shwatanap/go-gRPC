// Code generated by protoc-gen-go. DO NOT EDIT.
// source: image_upload.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageUploadRequest struct {
	// Types that are valid to be assigned to File:
	//	*ImageUploadRequest_FileMeta_
	//	*ImageUploadRequest_Data
	File                 isImageUploadRequest_File `protobuf_oneof:"file"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ImageUploadRequest) Reset()         { *m = ImageUploadRequest{} }
func (m *ImageUploadRequest) String() string { return proto.CompactTextString(m) }
func (*ImageUploadRequest) ProtoMessage()    {}
func (*ImageUploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ec9c05cccb56ed, []int{0}
}

func (m *ImageUploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageUploadRequest.Unmarshal(m, b)
}
func (m *ImageUploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageUploadRequest.Marshal(b, m, deterministic)
}
func (m *ImageUploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUploadRequest.Merge(m, src)
}
func (m *ImageUploadRequest) XXX_Size() int {
	return xxx_messageInfo_ImageUploadRequest.Size(m)
}
func (m *ImageUploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUploadRequest proto.InternalMessageInfo

type isImageUploadRequest_File interface {
	isImageUploadRequest_File()
}

type ImageUploadRequest_FileMeta_ struct {
	FileMeta *ImageUploadRequest_FileMeta `protobuf:"bytes,1,opt,name=file_meta,json=fileMeta,proto3,oneof"`
}

type ImageUploadRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*ImageUploadRequest_FileMeta_) isImageUploadRequest_File() {}

func (*ImageUploadRequest_Data) isImageUploadRequest_File() {}

func (m *ImageUploadRequest) GetFile() isImageUploadRequest_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *ImageUploadRequest) GetFileMeta() *ImageUploadRequest_FileMeta {
	if x, ok := m.GetFile().(*ImageUploadRequest_FileMeta_); ok {
		return x.FileMeta
	}
	return nil
}

func (m *ImageUploadRequest) GetData() []byte {
	if x, ok := m.GetFile().(*ImageUploadRequest_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ImageUploadRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ImageUploadRequest_OneofMarshaler, _ImageUploadRequest_OneofUnmarshaler, _ImageUploadRequest_OneofSizer, []interface{}{
		(*ImageUploadRequest_FileMeta_)(nil),
		(*ImageUploadRequest_Data)(nil),
	}
}

func _ImageUploadRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ImageUploadRequest)
	// file
	switch x := m.File.(type) {
	case *ImageUploadRequest_FileMeta_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileMeta); err != nil {
			return err
		}
	case *ImageUploadRequest_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Data)
	case nil:
	default:
		return fmt.Errorf("ImageUploadRequest.File has unexpected type %T", x)
	}
	return nil
}

func _ImageUploadRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ImageUploadRequest)
	switch tag {
	case 1: // file.file_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImageUploadRequest_FileMeta)
		err := b.DecodeMessage(msg)
		m.File = &ImageUploadRequest_FileMeta_{msg}
		return true, err
	case 2: // file.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.File = &ImageUploadRequest_Data{x}
		return true, err
	default:
		return false, nil
	}
}

func _ImageUploadRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ImageUploadRequest)
	// file
	switch x := m.File.(type) {
	case *ImageUploadRequest_FileMeta_:
		s := proto.Size(x.FileMeta)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ImageUploadRequest_Data:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Data)))
		n += len(x.Data)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImageUploadRequest_FileMeta struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageUploadRequest_FileMeta) Reset()         { *m = ImageUploadRequest_FileMeta{} }
func (m *ImageUploadRequest_FileMeta) String() string { return proto.CompactTextString(m) }
func (*ImageUploadRequest_FileMeta) ProtoMessage()    {}
func (*ImageUploadRequest_FileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ec9c05cccb56ed, []int{0, 0}
}

func (m *ImageUploadRequest_FileMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageUploadRequest_FileMeta.Unmarshal(m, b)
}
func (m *ImageUploadRequest_FileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageUploadRequest_FileMeta.Marshal(b, m, deterministic)
}
func (m *ImageUploadRequest_FileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUploadRequest_FileMeta.Merge(m, src)
}
func (m *ImageUploadRequest_FileMeta) XXX_Size() int {
	return xxx_messageInfo_ImageUploadRequest_FileMeta.Size(m)
}
func (m *ImageUploadRequest_FileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUploadRequest_FileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUploadRequest_FileMeta proto.InternalMessageInfo

func (m *ImageUploadRequest_FileMeta) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type ImageUploadResponse struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ContentType          string   `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Filename             string   `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageUploadResponse) Reset()         { *m = ImageUploadResponse{} }
func (m *ImageUploadResponse) String() string { return proto.CompactTextString(m) }
func (*ImageUploadResponse) ProtoMessage()    {}
func (*ImageUploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ec9c05cccb56ed, []int{1}
}

func (m *ImageUploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageUploadResponse.Unmarshal(m, b)
}
func (m *ImageUploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageUploadResponse.Marshal(b, m, deterministic)
}
func (m *ImageUploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageUploadResponse.Merge(m, src)
}
func (m *ImageUploadResponse) XXX_Size() int {
	return xxx_messageInfo_ImageUploadResponse.Size(m)
}
func (m *ImageUploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageUploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageUploadResponse proto.InternalMessageInfo

func (m *ImageUploadResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ImageUploadResponse) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ImageUploadResponse) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ImageUploadResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageUploadRequest)(nil), "image.upload.ImageUploadRequest")
	proto.RegisterType((*ImageUploadRequest_FileMeta)(nil), "image.upload.ImageUploadRequest.FileMeta")
	proto.RegisterType((*ImageUploadResponse)(nil), "image.upload.ImageUploadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageUploadServiceClient is the client API for ImageUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageUploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (ImageUploadService_UploadClient, error)
}

type imageUploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewImageUploadServiceClient(cc *grpc.ClientConn) ImageUploadServiceClient {
	return &imageUploadServiceClient{cc}
}

func (c *imageUploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (ImageUploadService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageUploadService_serviceDesc.Streams[0], "/image.upload.ImageUploadService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageUploadServiceUploadClient{stream}
	return x, nil
}

type ImageUploadService_UploadClient interface {
	Send(*ImageUploadRequest) error
	CloseAndRecv() (*ImageUploadResponse, error)
	grpc.ClientStream
}

type imageUploadServiceUploadClient struct {
	grpc.ClientStream
}

func (x *imageUploadServiceUploadClient) Send(m *ImageUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageUploadServiceUploadClient) CloseAndRecv() (*ImageUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageUploadServiceServer is the server API for ImageUploadService service.
type ImageUploadServiceServer interface {
	Upload(ImageUploadService_UploadServer) error
}

func RegisterImageUploadServiceServer(s *grpc.Server, srv ImageUploadServiceServer) {
	s.RegisterService(&_ImageUploadService_serviceDesc, srv)
}

func _ImageUploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageUploadServiceServer).Upload(&imageUploadServiceUploadServer{stream})
}

type ImageUploadService_UploadServer interface {
	SendAndClose(*ImageUploadResponse) error
	Recv() (*ImageUploadRequest, error)
	grpc.ServerStream
}

type imageUploadServiceUploadServer struct {
	grpc.ServerStream
}

func (x *imageUploadServiceUploadServer) SendAndClose(m *ImageUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageUploadServiceUploadServer) Recv() (*ImageUploadRequest, error) {
	m := new(ImageUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ImageUploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "image.upload.ImageUploadService",
	HandlerType: (*ImageUploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ImageUploadService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "image_upload.proto",
}

func init() { proto.RegisterFile("image_upload.proto", fileDescriptor_e2ec9c05cccb56ed) }

var fileDescriptor_e2ec9c05cccb56ed = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4f, 0xbc, 0x40,
	0x10, 0xc5, 0xe1, 0xff, 0x47, 0xc2, 0xcd, 0x51, 0x8d, 0x16, 0x84, 0x8a, 0xa3, 0x30, 0xd8, 0x60,
	0x72, 0x7e, 0x83, 0x2b, 0x0c, 0x16, 0x16, 0xa2, 0x36, 0x36, 0x64, 0xef, 0x98, 0x23, 0x9b, 0x00,
	0xbb, 0x1e, 0x8b, 0xc9, 0x19, 0x3f, 0x8e, 0x1f, 0xd4, 0x30, 0xa0, 0x91, 0x98, 0x68, 0xf7, 0xe6,
	0x97, 0xf7, 0xf2, 0x66, 0x67, 0x01, 0x65, 0x23, 0x2a, 0x2a, 0x7a, 0x5d, 0x2b, 0x51, 0xa6, 0xfa,
	0xa0, 0x8c, 0x42, 0x9f, 0x59, 0x3a, 0xb2, 0xf8, 0xdd, 0x06, 0xbc, 0x19, 0xc0, 0x23, 0xcf, 0x39,
	0x3d, 0xf7, 0xd4, 0x19, 0xcc, 0x60, 0xb1, 0x97, 0x35, 0x15, 0x0d, 0x19, 0x11, 0xd8, 0x91, 0x9d,
	0x2c, 0xd7, 0x17, 0xe9, 0xf7, 0x60, 0xfa, 0x33, 0x94, 0x5e, 0xcb, 0x9a, 0x6e, 0xc9, 0x88, 0xcc,
	0xca, 0xbd, 0xfd, 0xa4, 0xf1, 0x0c, 0x9c, 0x52, 0x18, 0x11, 0xfc, 0x8b, 0xec, 0xc4, 0xcf, 0xac,
	0x9c, 0xa7, 0xf0, 0x1c, 0xbc, 0x4f, 0x37, 0x86, 0xc0, 0xee, 0x56, 0x34, 0xc4, 0x55, 0x8b, 0xfc,
	0x6b, 0xde, 0xb8, 0xe0, 0x0c, 0x3a, 0x7e, 0x83, 0xd3, 0x59, 0x61, 0xa7, 0x55, 0xdb, 0x11, 0x22,
	0x38, 0x7d, 0x2f, 0xcb, 0x29, 0xc6, 0x7a, 0x60, 0x9d, 0x7c, 0x25, 0x2e, 0x3c, 0xc9, 0x59, 0xe3,
	0x0a, 0xfc, 0x9d, 0x6a, 0x0d, 0xb5, 0xa6, 0x30, 0x47, 0x4d, 0xc1, 0x7f, 0xf6, 0x2f, 0x27, 0xf6,
	0x70, 0xd4, 0x34, 0xdb, 0xc2, 0x99, 0x6f, 0xb1, 0xae, 0x66, 0x37, 0xba, 0xa7, 0xc3, 0x8b, 0xdc,
	0x11, 0xde, 0x81, 0x3b, 0x02, 0x8c, 0xfe, 0x3a, 0x4d, 0xb8, 0xfa, 0xc5, 0x31, 0xbe, 0x25, 0xb6,
	0x12, 0x7b, 0xe3, 0x3d, 0xb9, 0x15, 0xb5, 0x97, 0x7a, 0xbb, 0x75, 0xf9, 0xb3, 0xae, 0x3e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x1c, 0xbe, 0xe3, 0xd6, 0xc2, 0x01, 0x00, 0x00,
}
